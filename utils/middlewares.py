from asyncio import sleep as asleep
from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import Update, Message
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from utils.config import limit_request, max_requests, bad_words


class CountMiddleware(BaseMiddleware):
    """Middleware –ø–æ —Å—á—ë—Ç—É –∞–ø–¥–µ–π—Ç–æ–≤"""

    async def __call__(self, handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]], event: Update, data: Dict[str, Any]) -> Any:
        
        if event.message:
            user_id = event.message.from_user.id
            username = event.message.from_user.full_name
        elif event.callback_query:
            user_id = event.callback_query.from_user.id
            username = event.callback_query.from_user.full_name
        else:
            return

        if user_id in limit_request:
            limit_request[user_id]['count'] += 1
        else:
            limit_request[user_id] = {'count': 1, 'status': True}

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
        if limit_request[user_id]['count'] > max_requests:
            if limit_request[user_id]['status']:
                limit_request[user_id]['status'] = False
                text = f'''
‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï</b> ‚ö†Ô∏è

<b>–æ—Ç API Telegram</b>
<blockquote>–£–≤–∞–∂–∞–µ–º—ã–π, <b>{username}</b>‚ùóÔ∏è
–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º üí≠
–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ ‚è≥
</blockquote>
'''
                if event.message:
                    await event.message.answer(
                        text=text
                    )
                else:
                    await event.callback_query.message.answer(
                        text=text
                    )
            return
        
        await handler(event, data)


class StopWordGroupMiddleware(BaseMiddleware):
    """Middleware –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö"""

    async def __call__(self, handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]], message: Message, data: Dict[str, Any]) -> Any:
        
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
        if message.chat.type not in ['group', 'supergroup']:
            await handler(message, data)
            return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not message.text:
            return
        
        message_text = message.text.strip().lower()

        for bad_word in bad_words:
            if bad_word in message_text:
                await message.delete()

                msg = await message.answer(
                    text=f'<b>{message.from_user.full_name} </b>, <i>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Ü–µ–Ω–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º –∏ –ø–æ—ç—Ç–æ–º—É –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ ‚ùóÔ∏è</i>'
                )
                await asleep(10)
                await msg.delete()

        await handler(message, data)
