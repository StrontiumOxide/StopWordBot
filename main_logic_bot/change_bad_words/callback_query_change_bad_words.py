from aiogram import Router, types as tp, F
from aiogram.fsm.context import FSMContext
from utils.config import bad_words
from utils.states import BadWordState
from main_logic_bot.change_bad_words import kb_change_bad_words as kb

router = Router(name='callback_query_change_bad_words')


async def check_text(message: tp.Message) -> bool | None:
    """–§—É–Ω–∫—Ü–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""

    if not message.text:
        await message.answer(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ üòí')
        return True
    

@router.callback_query(F.data == 'add_word')
async def add_words_handler(callback_query: tp.CallbackQuery, state: FSMContext) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ data="add_word" """

    await callback_query.answer()
    await callback_query.message.answer(
        text='–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —á–∞—Ç–∞ ‚ò∫Ô∏è'
    )
  
    await state.set_state(BadWordState.bad_word_add)


@router.message(BadWordState.bad_word_add)
async def get_bad_word_add(message: tp.Message, state: FSMContext) -> None:
    """—Ñ—É–Ω—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if await check_text(message=message): return

    word = message.text.lower()
    if word in bad_words:
        text='–î–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ ‚ò∫Ô∏è'
    else:
        bad_words.append(word)
        text=f'–í —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ: <b>"{word}"</b> üòé'

    await message.answer(
        text=text
    )
    await state.clear()


@router.callback_query(F.data == 'remove_word')
async def add_words_handler(callback_query: tp.CallbackQuery, state: FSMContext) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ data="remove_word" """

    if not bad_words:
        await callback_query.answer(
            text='–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ ‚ùå',
            show_alert=True
        )
        return
    
    await callback_query.answer()
    await callback_query.message.answer(
        text='–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å? üßê',
        reply_markup=kb.reply.create_list_words_kb()
    )

    await state.set_state(BadWordState.bad_word_remove)


@router.message(BadWordState.bad_word_remove)
async def get_bad_worde_remove(message: tp.Message, state: FSMContext) -> None:
    """–§—É–Ω—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if await check_text(message=message): return

    word = message.text.lower()
    if word not in bad_words:
        await message.answer(
            text='–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚ùå'
        )
        return
    
    bad_words.remove(word)

    await message.answer(
        text=f'–°–ª–æ–≤–æ <b>"{word}"</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ‚ò∫Ô∏è',
        reply_markup=kb.reply.remove
    )

    await state.clear()
    